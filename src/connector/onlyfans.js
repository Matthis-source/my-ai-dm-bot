// src/connector/onlyfans.js
import puppeteer from "puppeteer";
import dotenv from "dotenv";

dotenv.config();                       // charge les variables du fichier .env

const COOKIE_ENV = "ONLYFANS_COOKIES";

/**
 * Lance Chrome (headless), injecte les cookies depuis .env
 * et v√©rifie que la navigation aboutit bien au tableau de bord.
 *
 * @returns {{browser: puppeteer.Browser, page: puppeteer.Page}}
 * @throws  si les cookies sont absents, expir√©s ou incorrects
 */
export async function launchBrowser() {
  // -----------------------------------------------------------------
  // 1Ô∏è‚É£  D√©marrage du navigateur (headless = true pour la prod)
  // -----------------------------------------------------------------
  const browser = await puppeteer.launch({
    headless: true,                     // passe √† false si tu veux voir le navigateur
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  const page = await browser.newPage();

  // -----------------------------------------------------------------
  // 2Ô∏è‚É£  Charger les cookies depuis la variable d‚Äôenvironnement
  // -----------------------------------------------------------------
  const raw = process.env[COOKIE_ENV];
  if (!raw) {
    throw new Error(
      `‚ö†Ô∏è  Variable d‚Äôenvironnement ${COOKIE_ENV} manquante. ` +
      `Ajoute tes cookies dans le fichier .env.`
    );
  }

  // `raw` doit √™tre un tableau JSON‚ÄØ; on le parse alors
  const cookies = JSON.parse(raw);
  await page.setCookie(...cookies);

  // -----------------------------------------------------------------
  // 3Ô∏è‚É£  V√©rifier que la navigation nous a bien redirig√©s
  //     vers le tableau de bord (c‚Äôest-√†‚Äëdire que les cookies sont valides)
  // -----------------------------------------------------------------
  await page.goto("https://onlyfans.com/dashboard", {
    waitUntil: "networkidle2",
    timeout: 15000,            // 15‚ÄØs max d‚Äôattente
  });

  // Si l‚ÄôURL contient toujours "/login", les cookies ne fonctionnent pas.
  if (page.url().includes("/login")) {
    await browser.close();
    throw new Error(
      "‚ùå  Impossible de se connecter ‚Äì les cookies sont peut‚Äë√™tre expir√©s ou incomplets."
    );
  }

  console.log("‚úÖ  Connect√© √† OnlyFans !");
  return { browser, page };
}

/**
 * R√©cup√®re les DM non lus (ou l‚Äôensemble des conversations).
 *
 * @param {puppeteer.Page} page ‚Äì page d√©j√† authentifi√©e
 * @returns {Promise<Array<{fanId:string, fanName:string, preview:string, link:string}>>}
 */
export async function fetchUnreadDMs(page) {
  await page.goto("https://onlyfans.com/my/chats", {
    waitUntil: "networkidle2",
  });

  // Attendre le s√©lecteur qui indique les conversations non lues.
  // (Si aucun DM non lu, le s√©lecteur n‚Äôappara√Æt pas ‚Üí on ignore l‚Äôerreur.)
  await page.waitForSelector(".chat-list-item.unread", { timeout: 5000 }).catch(() => {});

  const msgs = await page.$$eval(".chat-list-item.unread", (items) => {
    return items.map((el) => ({
      fanName: el.querySelector(".username")?.innerText.trim() || "Unknown",
      fanId: el.getAttribute("data-user-id"),
      preview: el.querySelector(".preview")?.innerText.trim() || "",
      link: el.querySelector("a")?.href,
    }));
  });

  console.log(`üì®  ${msgs.length} DM(s) non lus r√©cup√©r√©(s).`);
  return msgs;
}

/**
 * Envoie un texte √† un fan.
 *
 * @param {puppeteer.Page} page ‚Äì page d√©j√† authentifi√©e
 * @param {string} fanId ‚Äì identifiant du fan (ex. "12345678")
 * @param {string} text ‚Äì texte √† envoyer
 */
export async function sendMessage(page, fanId, text) {
  await page.goto(`https://onlyfans.com/chat/${fanId}`, {
    waitUntil: "networkidle2",
  });

  // Attendre que le champ de saisie soit pr√©sent
  await page.waitForSelector("textarea[name='message']", { timeout: 5000 });

  // Taper le texte (un petit d√©lai pour imiter un humain)
  await page.type("textarea[name='message']", text, { delay: 30 });

  // Cliquer sur le bouton d‚Äôenvoi
  await page.click("button[data-action='send']");

  // Petite pause afin que le message soit effectivement envoy√©
  await page.waitForTimeout(800);
  console.log(`‚úÖ  Message envoy√© √† fanId=${fanId}`);
}

